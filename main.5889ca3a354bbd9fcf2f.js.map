{"version":3,"sources":["webpack:///./java-script/promisification1.js","webpack:///./java-script/promisification2.js","webpack:///./java-script/promisification3.js"],"names":["delay","ms","Promise","resolve","reject","logger1","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger2","updatedUsers","table","makeTransaction","object","min","max","Math","floor","random","setTimeout","canProcess","logSuccess","id","execution","logError","warn","catch"],"mappings":"2JAOMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBD,EAAQF,OAGVI,EAAU,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OACxBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCXXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAEnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAAAC,GAIfA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAMnEC,EAAU,SAAAC,GAAY,OAAIZ,QAAQa,MAAMD,IAC9CN,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GChBnC,IAISG,EAAkB,SAACC,GACtB,OAAO,IAAIpB,SAAQ,SAACC,EAAQC,GACxB,IANyBmB,EAAKC,EAMxBxB,GANmBuB,EAMe,IANVC,EAMe,IAL5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMhDK,YAAY,WACR,IAAMC,EAAaJ,KAAKE,SAAW,GAChCE,EACD1B,EAAQmB,GAGNO,GACAzB,EAAOkB,KAEVtB,OAIH8B,EAAa,SAACR,GAClBf,QAAQC,IAAR,eAA2Bc,EAAOS,GAAlC,iBAAqDT,EAAOU,UAA5D,OAGIC,EAAW,SAAAX,GACff,QAAQ2B,KAAR,gCAA6CZ,EAAOS,GAApD,8BAGFV,EAAgB,CAAEU,GAAI,GAAIC,UAAW,MAClCvB,KAAKqB,GACLK,MAAMF,GAETZ,EAAgB,CAAEU,GAAI,GAAIC,UAAW,MAClCvB,KAAKqB,GACLK,MAAMF,GAETZ,EAAgB,CAAEU,GAAI,GAAIC,UAAW,KAClCvB,KAAKqB,GACLK,MAAMF,GAETZ,EAAgB,CAAEU,GAAI,GAAIC,UAAW,MAClCvB,KAAKqB,GACLK,MAAMF,K","file":"main.5889ca3a354bbd9fcf2f.js","sourcesContent":["\r\n\r\nexport \r\n// Задание 1\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\"\r\n//  через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд \r\n//  которое передали во время вызова функции delay.\r\nconst delay = ms => {\r\n    return new Promise((resolve, reject) => {\r\n        resolve(ms)\r\n      })\r\n};\r\nconst logger1 = time => console.log(`Resolved after ${time}ms`);\r\ndelay(2000).then(logger1); // Resolved after 2000ms\r\ndelay(1000).then(logger1); // Resolved after 1000ms\r\ndelay(1500).then(logger1); // Resolved after 1500ms\r\n\r\n","export\r\n// Задание 2\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\r\n//  а принимала всего два параметра allUsers и userName и возвращала промис.\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n          );\r\n        resolve(updatedUsers)\r\n    })\r\n\r\n};\r\nconst logger2 = updatedUsers => console.table(updatedUsers);\r\ntoggleUserState(users, 'Mango').then(logger2);\r\ntoggleUserState(users, 'Lux').then(logger2);\r\n","export \r\n// Задание 3\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError,\r\n//  а принимала всего один параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }; \r\n  \r\n   const makeTransaction = (object) => {\r\n      return new Promise((resolve,reject) => {\r\n          const delay = randomIntegerFromInterval(200, 500);\r\n        setTimeout( () => {\r\n            const canProcess = Math.random() > 0.3;\r\n            if(canProcess){\r\n              resolve(object)\r\n              return;\r\n            }\r\n            if(!canProcess){\r\n                reject(object)\r\n            }\r\n          }, delay);\r\n      });\r\n    };\r\n    \r\n    const logSuccess = (object) => {\r\n      console.log(`Transaction ${object.id} processed in ${object.execution}ms`);\r\n    };\r\n    \r\n    const logError = object => {\r\n      console.warn(`Error processing transaction ${object.id}. Please try again later.`);\r\n    };\r\n    \r\n    makeTransaction({ id: 70, execution: 150 })\r\n      .then(logSuccess)\r\n      .catch(logError);\r\n    \r\n    makeTransaction({ id: 71, execution: 230 })\r\n      .then(logSuccess)\r\n      .catch(logError);\r\n    \r\n    makeTransaction({ id: 72, execution: 75 })\r\n      .then(logSuccess)\r\n      .catch(logError);\r\n    \r\n    makeTransaction({ id: 73, execution: 100 })\r\n      .then(logSuccess)\r\n      .catch(logError);"],"sourceRoot":""}