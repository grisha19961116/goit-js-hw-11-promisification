{"version":3,"sources":["webpack:///./java-script/promisificationFirst.js","webpack:///./java-script/promisificationSecond.js","webpack:///./java-script/promisificationThird.js"],"names":["delay","ms","Promise","resolve","reject","logger1","time","console","log","then","usersArray","name","active","toggleUserState","allUsers","userName","map","user","logger2","users","table","makeTransaction","object","min","max","Math","floor","random","setTimeout","canProcess","logSuccess","id","execution","logError","warn","catch"],"mappings":"0HAKMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BD,EAAQF,OAGNI,EAAU,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OACxBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCVXK,EAAa,CACjB,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAEnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAC,GAIjBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAK7DC,EAAU,SAAAC,GAAK,OAAIZ,QAAQa,MAAMD,IACvCN,EAAgBH,EAAY,SAASD,KAAKS,GAC1CL,EAAgBH,EAAY,OAAOD,KAAKS,GCfxC,IAIMG,EAAkB,SAAAC,GACtB,OAAO,IAAIpB,SAAQ,SAACC,EAASC,GAC3B,IAN+BmB,EAAKC,EAM9BxB,GANyBuB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMlDK,YAAW,WACT,IAAMC,EAAaJ,KAAKE,SAAW,GAC/BE,EACF1B,EAAQmB,GAGLO,GACHzB,EAAOkB,KAERtB,OAID8B,EAAa,SAAAR,GACjBf,QAAQC,IAAR,eAA2Bc,EAAOS,GAAlC,iBAAqDT,EAAOU,UAA5D,OAGIC,EAAW,SAAAX,GACff,QAAQ2B,KAAR,gCACkCZ,EAAOS,GADzC,8BAKFV,EAAgB,CAAEU,GAAI,GAAIC,UAAW,MAAOvB,KAAKqB,GAAYK,MAAMF,GAEnEZ,EAAgB,CAAEU,GAAI,GAAIC,UAAW,MAAOvB,KAAKqB,GAAYK,MAAMF,GAEnEZ,EAAgB,CAAEU,GAAI,GAAIC,UAAW,KAAMvB,KAAKqB,GAAYK,MAAMF,GAElEZ,EAAgB,CAAEU,GAAI,GAAIC,UAAW,MAAOvB,KAAKqB,GAAYK,MAAMF,K","file":"main.3bb1e3ef538f7cadef07.js","sourcesContent":["export // Exercise 1\r\n// Write function delay(ms) ,  return promise which across in state \"resolved\"\r\n// with ms .Value used promise has to be the same quantity of ms which we pass\r\n// during invoking function delay .\r\n\r\nconst delay = ms => {\r\n  return new Promise((resolve, reject) => {\r\n    resolve(ms);\r\n  });\r\n};\r\nconst logger1 = time => console.log(`Resolved after ${time}ms`);\r\ndelay(2000).then(logger1); // Resolved after 2000ms\r\ndelay(1000).then(logger1); // Resolved after 1000ms\r\ndelay(1500).then(logger1); // Resolved after 1500ms\r\n","export // Exercise 2\r\n// Rewrite function toggleUserState() so for that does not use callback-function\r\n// and get only two params allUsers , userName and return a promise.\r\nconst usersArray = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\nconst logger2 = users => console.table(users);\r\ntoggleUserState(usersArray, 'Mango').then(logger2);\r\ntoggleUserState(usersArray, 'Lux').then(logger2);\r\n","export // Exercise 3\r\n// Rewrite function makeTransaction() so , it does not use callback-function\r\n// onSuccess or onError and get one param transaction and return promise .\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = object => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve(object);\r\n        return;\r\n      }\r\n      if (!canProcess) {\r\n        reject(object);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = object => {\r\n  console.log(`Transaction ${object.id} processed in ${object.execution}ms`);\r\n};\r\n\r\nconst logError = object => {\r\n  console.warn(\r\n    `Error processing transaction ${object.id}. Please try again later.`,\r\n  );\r\n};\r\n\r\nmakeTransaction({ id: 70, execution: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, execution: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, execution: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, execution: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}